AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-crammer

  Serverless Document Processing Pipeline
  A comprehensive solution for PDF text extraction and summarization

Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Architectures:
      - x86_64
    LoggingConfig:
      LogFormat: JSON
      ApplicationLogLevel: INFO
    Environment:
      Variables:
        LOG_LEVEL: INFO
        POWERTOOLS_SERVICE_NAME: document-processor

Parameters:
  EnvironmentType:
    Type: String
    Description: Deployment environment (dev/stage/prod)
    Default: dev
    AllowedValues:
      - dev
      - stage
      - prod
  NotificationEmail:
    Type: String
    Description: Email address to receive notifications on document processing completion
    Default: ""

  RetentionDays:
    Type: Number
    Description: Number of days to retain logs
    Default: "7"
    MinValue: "1"
    MaxValue: "365"

Resources:
  # S3 Buckets with encryption, and lifecycle policies
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "doc-input-${AWS::AccountId}-${AWS::Region}-${EnvironmentType}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: ExpireTempFiles
            Status: Enabled
            ExpirationInDays: 7
            Prefix: temp/
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "doc-output-${AWS::AccountId}-${AWS::Region}-${EnvironmentType}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # State Machine for document processing
  DocumentProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "DocumentProcessor-${EnvironmentType}"
      Role: !GetAtt DocumentProcessingStateMachineRole.Arn
      Definition:
        StartAt: CheckIfPDF
        States:
          CheckIfPDF:
            Type: Choice
            Choices:
              - Variable: "$.detail.object.key"
                StringMatches: "*.pdf"
                Next: ExtractText
            Default: NotifyFailure

          ExtractText:
            Type: Task
            Resource: !GetAtt PdfTextExtractorFunction.Arn
            ResultPath: $.sectionsArray
            Next: FanOutSummarize

          FanOutSummarize:
            Type: Map
            ItemsPath: $.sectionsArray
            MaxConcurrency: 3
            Parameters:
              original_key.$: "$.detail.object.key"
              section_name.$: "$$.Map.Item.Value.section_name"
              section_text.$: "$$.Map.Item.Value.section_text"
            Iterator:
              StartAt: SummarizeSection
              States:
                SummarizeSection:
                  Type: Task
                  Resource: !GetAtt TorchSummarizerFunction.Arn
                  OutputPath: $.summary
                  End: true
            ResultPath: $.summaries
            Next: AggregateSummaries

          AggregateSummaries:
            Type: Task
            Resource: !GetAtt AggregateSummariesFunction.Arn
            Parameters:
              summaries.$: $.summaries
            Next: NotifyCompletion

          NotifyCompletion:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: !Ref CompletionSNSTopic
              Message.$: "States.Format('Document processing completed for: {}', $.s3_key)"
            End: true

          NotifyFailure:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: !Ref CompletionSNSTopic
              Message.$: "States.Format('Document processing failed: Uploaded file is not a PDF. Key: {}', $.detail.object.key)"
            End: true

      Events:
        S3FileUploadEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: ["aws.s3"]
              detail-type: ["Object Created"]
              detail:
                bucket:
                  name: [!Ref InputBucket]
            EventBusName: default

  CompletionSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "DocumentProcessingCompleted-${EnvironmentType}"

  CompletionSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref CompletionSNSTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  EventBridgeInvokeStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref DocumentProcessingStateMachine

  DocumentProcessingStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowEventBridgeInvocation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*"
        - PolicyName: EventBridgeInvoke
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/DocumentProcessor-${EnvironmentType}-S3FileUploadEvent"
        - PolicyName: StateMachineLambdaInvoke
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt PdfTextExtractorFunction.Arn
                  - !GetAtt TorchSummarizerFunction.Arn
                  - !GetAtt AggregateSummariesFunction.Arn
        - PolicyName: StateMachineS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${InputBucket}/*"
                  - !Sub "arn:aws:s3:::${OutputBucket}/*"
        - PolicyName: StateMachineSNSPublish
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref CompletionSNSTopic

  # Lambda Functions with optimized configuration
  PdfTextExtractorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "PdfTextExtractor-${EnvironmentType}"
      Description: Extracts text from PDF documents
      CodeUri: functions/pdf_text_extractor/
      Handler: app.lambda_handler
      Runtime: python3.11
      MemorySize: 1024
      Timeout: 10
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref InputBucket

  TorchSummarizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "TorchSummarizer-${EnvironmentType}"
      Description: Summarizes text using PyTorch models
      PackageType: Image
      Timeout: 300
      MemorySize: 3008
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: functions/torch_summarizer/
      DockerTag: serverless-summarizer-v1

  AggregateSummariesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "AggregateSummaries-${EnvironmentType}"
      Description: Aggregates section summaries into a single output
      CodeUri: functions/aggregate_summaries/
      Handler: app.lambda_handler
      Runtime: python3.11
      MemorySize: 512
      Timeout: 10
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref OutputBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref OutputBucket

Outputs:
  DocumentProcessingStateMachineArn:
    Description: Document Processing State Machine ARN
    Value: !Ref DocumentProcessingStateMachine

  InputBucketName:
    Description: Name of the input S3 bucket
    Value: !Ref InputBucket

  OutputBucketName:
    Description: Name of the output S3 bucket
    Value: !Ref OutputBucket

  PdfTextExtractorFunctionArn:
    Description: PDF Text Extractor Lambda ARN
    Value: !GetAtt PdfTextExtractorFunction.Arn

  TorchSummarizerFunctionArn:
    Description: Torch Summarizer Lambda ARN
    Value: !GetAtt TorchSummarizerFunction.Arn

  AggregateSummariesFunctionArn:
    Description: Aggregate Summaries Lambda ARN
    Value: !GetAtt AggregateSummariesFunction.Arn
